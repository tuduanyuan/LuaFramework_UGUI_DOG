//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_PanelManager_PanelTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(LuaFramework.PanelManager.PanelType));
		L.RegVar("Type0", get_Type0, null);
		L.RegVar("Type1", get_Type1, null);
		L.RegVar("Type2", get_Type2, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<LuaFramework.PanelManager.PanelType>.Check = CheckType;
		StackTraits<LuaFramework.PanelManager.PanelType>.Push = Push;
	}

	static void Push(IntPtr L, LuaFramework.PanelManager.PanelType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(LuaFramework.PanelManager.PanelType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type0(IntPtr L)
	{
		ToLua.Push(L, LuaFramework.PanelManager.PanelType.Type0);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type1(IntPtr L)
	{
		ToLua.Push(L, LuaFramework.PanelManager.PanelType.Type1);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type2(IntPtr L)
	{
		ToLua.Push(L, LuaFramework.PanelManager.PanelType.Type2);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		LuaFramework.PanelManager.PanelType o = (LuaFramework.PanelManager.PanelType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

